 Python (Django, Flask, etc.) – Open Computing Facility Toggle navigation Open Computing Facility Join About Us Our Organization Joining the Staff Team Lab Statistics Backend Infrastructure Services Computer Lab Printing Web Hosting Application Hosting SSH/SFTP (Shell) Email Hosting MySQL Database Software Mirrors High Performance Computing Staff Hours Help Contact Us Log In Python (Django, Flask, etc.) Table of Contents Setting up a virtualenv Installing gunicorn Preparing your app to be supervised Supervise your app with systemd Bonus Gunicorn tip: reloading your app Suggestions/improvements? Note: This document only applies to student groups with virtual hosts who have applied for apphosting. For normal user accounts or for groups without apphosting, you'll want to host with FastCGI instead. See our instructions for Django or Flask . You will want to deploy your application using a virtualenv so that you can easily install and manage dependencies and versions. Setting up a virtualenv Create a directory for your app to live in: mkdir -p ~/myapp cd ~/myapp Set up a virtualenv: virtualenv venv Activate the virtualenv: . venv/bin/activate You should do this step every time before running your app or managing installed packages. Copy your code to ~/myapp/src or similar, and install any dependencies using pip . Installing gunicorn We recommend using gunicorn to serve your application. After activating your virtualenv, install it with pip install gunicorn . Note that you may see a warning about a syntax error. As long as the output ends in "Successfully installed gunicorn", it's safe to ignore this . Preparing your app to be supervised Create a file at ~/myapp/run with content like: #!/bin/bash -e . ~/myapp/venv/bin/activate PYTHONPATH=~/myapp/src:$PYTHONPATH \ exec gunicorn -w 2 -b unix:/srv/apps/$(whoami)/$(whoami).sock \ --log-file - main:app Replace main:app with the module containing the app, and name of your app, then make run executable: chmod +x ~/myapp/run Test executing the run script. You should be able to access your website while running it (or see any errors in your terminal). Supervise your app with systemd Cool, your app works. Set up systemd to supervise your app (so that it starts and restarts automatically). Bonus Gunicorn tip: reloading your app Gunicorn will reload your app if you send it SIGHUP. You can teach systemd that fact by adding the following line under [Service] in your systemd unit file: ExecReload=/bin/kill -HUP $MAINPID and then running systemctl --user daemon-reload . After that, you can use systemctl to reload your app: systemctl --user reload myapp Suggestions/improvements? If you have a better way to host Python-based apps on the app server (or a suggestion for how we could improve this documentation), send us an email ! Edit this Page Page History Table of Contents Setting up a virtualenv Installing gunicorn Preparing your app to be supervised Supervise your app with systemd Bonus Gunicorn tip: reloading your app Suggestions/improvements? More in this category Web application hosting Node.js Python (Django, Flask, etc.) Ruby on Rails OCF ♥ Linux , Kubernetes , Python , Nix , and Free/Open-Source Software. Sound like you? Join the staff team! About the OCF Overview Officers Official Documents Board Meeting Minutes Privacy Policy Account Tools Join the OCF Reset Password Manage My Account Services Computer Lab & Printing Web Hosting Application Hosting Email Hosting SSH/Remote Shell High Performance Computing Help and Support Status Blog Donate to the OCF Frequently Asked Questions User Documentation Staff Documentation Contact Us The Open Computing Facility is run entirely by student volunteers. Copyright © 1989–2025 Board of Directors of the Open Computing Facility. The Open Computing Facility is a Chartered Program of the ASUC. 